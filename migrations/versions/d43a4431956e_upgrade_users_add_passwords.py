"""upgrade_users_add_passwords

Revision ID: d43a4431956e
Revises: 0b89428347f9
Create Date: 2016-01-23 11:40:57.599768

"""

# revision identifiers, used by Alembic.
revision = 'd43a4431956e'
down_revision = '0b89428347f9'

from alembic import op
import sqlalchemy as sa


def upgrade():
    ### commands auto generated by Alembic - please adjust! ###
    op.create_table('roles_users',
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('role_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], )
    )

    op.execute(sa.sql.text('''
        INSERT INTO roles_users
        SELECT id, role_id FROM users where role_id is not null
    '''))

    op.create_foreign_key('updated_by_id_fkey', 'accepted_domains', 'users', ['updated_by_id'], ['id'], use_alter=True)
    op.create_foreign_key('created_by_id_fkey', 'accepted_domains', 'users', ['created_by_id'], ['id'], use_alter=True)
    op.create_foreign_key('created_by_id_fkey', 'app_status', 'users', ['created_by_id'], ['id'], use_alter=True)
    op.create_foreign_key('updated_by_id_fkey', 'app_status', 'users', ['updated_by_id'], ['id'], use_alter=True)
    op.create_foreign_key('created_by_id_fkey', 'category', 'users', ['created_by_id'], ['id'], use_alter=True)
    op.create_foreign_key('updated_by_id_fkey', 'category', 'users', ['updated_by_id'], ['id'], use_alter=True)
    op.create_foreign_key('created_by_id_fkey', 'department', 'users', ['created_by_id'], ['id'], use_alter=True)
    op.create_foreign_key('updated_by_id_fkey', 'department', 'users', ['updated_by_id'], ['id'], use_alter=True)
    op.create_foreign_key('updated_by_id_fkey', 'document', 'users', ['updated_by_id'], ['id'], use_alter=True)
    op.create_foreign_key('created_by_id_fkey', 'document', 'users', ['created_by_id'], ['id'], use_alter=True)
    op.create_foreign_key('created_by_id_fkey', 'job_status', 'users', ['created_by_id'], ['id'], use_alter=True)
    op.create_foreign_key('updated_by_id_fkey', 'job_status', 'users', ['updated_by_id'], ['id'], use_alter=True)
    op.create_foreign_key('updated_by_id_fkey', 'opportunity', 'users', ['updated_by_id'], ['id'], use_alter=True)
    op.create_foreign_key('created_by_id_fkey', 'opportunity', 'users', ['created_by_id'], ['id'], use_alter=True)
    op.create_foreign_key('created_by_id_fkey', 'opportunity_document', 'users', ['created_by_id'], ['id'], use_alter=True)
    op.create_foreign_key('updated_by_id_fkey', 'opportunity_document', 'users', ['updated_by_id'], ['id'], use_alter=True)
    op.create_foreign_key('created_by_id_fkey', 'opportunity_type', 'users', ['created_by_id'], ['id'], use_alter=True)
    op.create_foreign_key('updated_by_id_fkey', 'opportunity_type', 'users', ['updated_by_id'], ['id'], use_alter=True)
    op.add_column(u'roles', sa.Column('description', sa.String(length=255), nullable=True))
    op.create_unique_constraint('roles_unique_description', 'roles', ['description'])
    op.create_foreign_key('created_by_id_fkey', 'roles', 'users', ['created_by_id'], ['id'], use_alter=True)
    op.create_foreign_key('updated_by_id_fkey', 'roles', 'users', ['updated_by_id'], ['id'], use_alter=True)
    op.add_column(u'users', sa.Column('confirmed_at', sa.DateTime(), nullable=True))
    op.add_column(u'users', sa.Column('current_login_at', sa.DateTime(), nullable=True))
    op.add_column(u'users', sa.Column('current_login_ip', sa.String(length=255), nullable=True))
    op.add_column(u'users', sa.Column('last_login_at', sa.DateTime(), nullable=True))
    op.add_column(u'users', sa.Column('last_login_ip', sa.String(length=255), nullable=True))
    op.add_column(u'users', sa.Column('login_count', sa.Integer(), nullable=True))
    op.add_column(u'users', sa.Column('password', sa.String(length=255), nullable=True))
    op.drop_constraint(u'users_role_id_fkey', 'users', type_='foreignkey')
    op.create_foreign_key('created_by_id_fkey', 'users', 'users', ['created_by_id'], ['id'], use_alter=True)
    op.create_foreign_key('updated_by_id_fkey', 'users', 'users', ['updated_by_id'], ['id'], use_alter=True)
    op.drop_column(u'users', 'role_id')
    op.create_foreign_key('updated_by_id_fkey', 'vendor', 'users', ['updated_by_id'], ['id'], use_alter=True)
    op.create_foreign_key('created_by_id_fkey', 'vendor', 'users', ['created_by_id'], ['id'], use_alter=True)
    ### end Alembic commands ###


def downgrade():
    ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint('created_by_id_fkey', 'vendor', type_='foreignkey')
    op.drop_constraint('updated_by_id_fkey', 'vendor', type_='foreignkey')
    op.add_column(u'users', sa.Column('role_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_constraint('updated_by_id_fkey', 'users', type_='foreignkey')
    op.drop_constraint('created_by_id_fkey', 'users', type_='foreignkey')
    op.create_foreign_key(u'users_role_id_fkey', 'users', 'roles', ['role_id'], ['id'], ondelete=u'SET NULL')
    op.drop_column(u'users', 'password')
    op.drop_column(u'users', 'login_count')
    op.drop_column(u'users', 'last_login_ip')
    op.drop_column(u'users', 'last_login_at')
    op.drop_column(u'users', 'current_login_ip')
    op.drop_column(u'users', 'current_login_at')
    op.drop_column(u'users', 'confirmed_at')
    op.drop_constraint('updated_by_id_fkey', 'roles', type_='foreignkey')
    op.drop_constraint('created_by_id_fkey', 'roles', type_='foreignkey')
    op.drop_constraint('roles_unique_description', 'roles', type_='unique')
    op.drop_column(u'roles', 'description')
    op.drop_constraint('updated_by_id_fkey', 'opportunity_type', type_='foreignkey')
    op.drop_constraint('created_by_id_fkey', 'opportunity_type', type_='foreignkey')
    op.drop_constraint('updated_by_id_fkey', 'opportunity_document', type_='foreignkey')
    op.drop_constraint('created_by_id_fkey', 'opportunity_document', type_='foreignkey')
    op.drop_constraint('created_by_id_fkey', 'opportunity', type_='foreignkey')
    op.drop_constraint('updated_by_id_fkey', 'opportunity', type_='foreignkey')
    op.drop_constraint('updated_by_id_fkey', 'job_status', type_='foreignkey')
    op.drop_constraint('created_by_id_fkey', 'job_status', type_='foreignkey')
    op.drop_constraint('created_by_id_fkey', 'document', type_='foreignkey')
    op.drop_constraint('updated_by_id_fkey', 'document', type_='foreignkey')
    op.drop_constraint('updated_by_id_fkey', 'department', type_='foreignkey')
    op.drop_constraint('created_by_id_fkey', 'department', type_='foreignkey')
    op.drop_constraint('updated_by_id_fkey', 'category', type_='foreignkey')
    op.drop_constraint('created_by_id_fkey', 'category', type_='foreignkey')
    op.drop_constraint('updated_by_id_fkey', 'app_status', type_='foreignkey')
    op.drop_constraint('created_by_id_fkey', 'app_status', type_='foreignkey')
    op.drop_constraint('created_by_id_fkey', 'accepted_domains', type_='foreignkey')
    op.drop_constraint('updated_by_id_fkey', 'accepted_domains', type_='foreignkey')
    op.execute(sa.sql.text('''
        UPDATE users SET role_id =
        (select min(role_id) from roles_users
            where users.id = roles_users.user_id)
    '''))
    op.drop_table('roles_users')
    ### end Alembic commands ###
